import asyncio
import json
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils.executor import start_polling
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
TOKEN = "7970425858:AAGaz_RIO6FEDIogmTXLLepRAlTupD9uo5E"  # –¢–æ–∫–µ–Ω –∏–∑ BotFather
GROUP_ID = -1002465564379  # ID –≥—Ä—É–ø–ø—ã

# –ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á—Ç–µ—Ü–æ–≤
readers = [
    {"name": "–ê–ª–º–∞—Ç", "range": "1-10"},
    {"name": "–ê–±–∏–ª–∫–∞–π—ã—Ä", "range": "11-20"},
    {"name": "–ê–Ω—É–∞—Ä", "range": "21-30"},
    {"name": "–î–∞—Ä—Ö–∞–Ω", "range": "31-40"},
    {"name": "–ú–∞–¥–∏—è—Ä", "range": "41-50"},
    {"name": "–ê–±–µ–∫–µ", "range": "51-60"},
    {"name": "–ñ–∞–∫–µ", "range": "61-70"},
    {"name": "–§–∞—Ä–∞–±–∏", "range": "71-80"},
    {"name": "–ú–∞–Ω—Å—É—Ä", "range": "81-90"},
    {"name": "–ê–ª–º–∞–∑", "range": "91-104"},
]

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
FILE_PATH = "readers.json"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞
def load_readers():
    try:
        with open(FILE_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return readers  

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
def save_readers(data):
    with open(FILE_PATH, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–¥–≤–∏–≥–∞ —Å–ø–∏—Å–∫–∞
def shift_readers():
    data = load_readers()
    data.append(data.pop(0))  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –≤ –∫–æ–Ω–µ—Ü
    save_readers(data)
    return data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞
def format_readers():
    data = load_readers()
    today = "üìñ **–ì—Ä–∞—Ñ–∏–∫ —á—Ç–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è**\n\n"
    formatted_list = "\n".join([f"{i+1}Ô∏è‚É£ **{r['name']}** ‚Üí {r['range']}" for i, r in enumerate(data)])
    return today + formatted_list

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, parse_mode=ParseMode.MARKDOWN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
@dp.message_handler(commands=["update"])
async def update_list(message: types.Message):
    if message.chat.id == GROUP_ID:
        shift_readers()
        await message.answer(format_readers())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
async def daily_update():
    shift_readers()
    await bot.send_message(GROUP_ID, format_readers())

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
async def on_startup(_):
    scheduler.add_job(daily_update, "cron", hour=9, minute=0)
    scheduler.start()

if __name__ == "__main__":
    start_polling(dp, on_startup=on_startup)
